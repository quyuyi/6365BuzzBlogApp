/**
 * Autogenerated by Thrift Compiler (0.14.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef TRecommendationService_H
#define TRecommendationService_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include <memory>
#include "buzzblog_types.h"

namespace gen {

#ifdef _MSC_VER
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class TRecommendationServiceIf {
 public:
  virtual ~TRecommendationServiceIf() {}
  virtual void retrieve_recommended_posts(std::vector<TPost> & _return, const int32_t requester_id, const std::string& keyword) = 0;
};

class TRecommendationServiceIfFactory {
 public:
  typedef TRecommendationServiceIf Handler;

  virtual ~TRecommendationServiceIfFactory() {}

  virtual TRecommendationServiceIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(TRecommendationServiceIf* /* handler */) = 0;
};

class TRecommendationServiceIfSingletonFactory : virtual public TRecommendationServiceIfFactory {
 public:
  TRecommendationServiceIfSingletonFactory(const ::std::shared_ptr<TRecommendationServiceIf>& iface) : iface_(iface) {}
  virtual ~TRecommendationServiceIfSingletonFactory() {}

  virtual TRecommendationServiceIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(TRecommendationServiceIf* /* handler */) {}

 protected:
  ::std::shared_ptr<TRecommendationServiceIf> iface_;
};

class TRecommendationServiceNull : virtual public TRecommendationServiceIf {
 public:
  virtual ~TRecommendationServiceNull() {}
  void retrieve_recommended_posts(std::vector<TPost> & /* _return */, const int32_t /* requester_id */, const std::string& /* keyword */) {
    return;
  }
};

typedef struct _TRecommendationService_retrieve_recommended_posts_args__isset {
  _TRecommendationService_retrieve_recommended_posts_args__isset() : requester_id(false), keyword(false) {}
  bool requester_id :1;
  bool keyword :1;
} _TRecommendationService_retrieve_recommended_posts_args__isset;

class TRecommendationService_retrieve_recommended_posts_args {
 public:

  TRecommendationService_retrieve_recommended_posts_args(const TRecommendationService_retrieve_recommended_posts_args&);
  TRecommendationService_retrieve_recommended_posts_args& operator=(const TRecommendationService_retrieve_recommended_posts_args&);
  TRecommendationService_retrieve_recommended_posts_args() : requester_id(0), keyword() {
  }

  virtual ~TRecommendationService_retrieve_recommended_posts_args() noexcept;
  int32_t requester_id;
  std::string keyword;

  _TRecommendationService_retrieve_recommended_posts_args__isset __isset;

  void __set_requester_id(const int32_t val);

  void __set_keyword(const std::string& val);

  bool operator == (const TRecommendationService_retrieve_recommended_posts_args & rhs) const
  {
    if (!(requester_id == rhs.requester_id))
      return false;
    if (!(keyword == rhs.keyword))
      return false;
    return true;
  }
  bool operator != (const TRecommendationService_retrieve_recommended_posts_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TRecommendationService_retrieve_recommended_posts_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TRecommendationService_retrieve_recommended_posts_pargs {
 public:


  virtual ~TRecommendationService_retrieve_recommended_posts_pargs() noexcept;
  const int32_t* requester_id;
  const std::string* keyword;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TRecommendationService_retrieve_recommended_posts_result__isset {
  _TRecommendationService_retrieve_recommended_posts_result__isset() : success(false) {}
  bool success :1;
} _TRecommendationService_retrieve_recommended_posts_result__isset;

class TRecommendationService_retrieve_recommended_posts_result {
 public:

  TRecommendationService_retrieve_recommended_posts_result(const TRecommendationService_retrieve_recommended_posts_result&);
  TRecommendationService_retrieve_recommended_posts_result& operator=(const TRecommendationService_retrieve_recommended_posts_result&);
  TRecommendationService_retrieve_recommended_posts_result() {
  }

  virtual ~TRecommendationService_retrieve_recommended_posts_result() noexcept;
  std::vector<TPost>  success;

  _TRecommendationService_retrieve_recommended_posts_result__isset __isset;

  void __set_success(const std::vector<TPost> & val);

  bool operator == (const TRecommendationService_retrieve_recommended_posts_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const TRecommendationService_retrieve_recommended_posts_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TRecommendationService_retrieve_recommended_posts_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TRecommendationService_retrieve_recommended_posts_presult__isset {
  _TRecommendationService_retrieve_recommended_posts_presult__isset() : success(false) {}
  bool success :1;
} _TRecommendationService_retrieve_recommended_posts_presult__isset;

class TRecommendationService_retrieve_recommended_posts_presult {
 public:


  virtual ~TRecommendationService_retrieve_recommended_posts_presult() noexcept;
  std::vector<TPost> * success;

  _TRecommendationService_retrieve_recommended_posts_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class TRecommendationServiceClient : virtual public TRecommendationServiceIf {
 public:
  TRecommendationServiceClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  TRecommendationServiceClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void retrieve_recommended_posts(std::vector<TPost> & _return, const int32_t requester_id, const std::string& keyword);
  void send_retrieve_recommended_posts(const int32_t requester_id, const std::string& keyword);
  void recv_retrieve_recommended_posts(std::vector<TPost> & _return);
 protected:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class TRecommendationServiceProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  ::std::shared_ptr<TRecommendationServiceIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (TRecommendationServiceProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_retrieve_recommended_posts(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  TRecommendationServiceProcessor(::std::shared_ptr<TRecommendationServiceIf> iface) :
    iface_(iface) {
    processMap_["retrieve_recommended_posts"] = &TRecommendationServiceProcessor::process_retrieve_recommended_posts;
  }

  virtual ~TRecommendationServiceProcessor() {}
};

class TRecommendationServiceProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  TRecommendationServiceProcessorFactory(const ::std::shared_ptr< TRecommendationServiceIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::std::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::std::shared_ptr< TRecommendationServiceIfFactory > handlerFactory_;
};

class TRecommendationServiceMultiface : virtual public TRecommendationServiceIf {
 public:
  TRecommendationServiceMultiface(std::vector<std::shared_ptr<TRecommendationServiceIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~TRecommendationServiceMultiface() {}
 protected:
  std::vector<std::shared_ptr<TRecommendationServiceIf> > ifaces_;
  TRecommendationServiceMultiface() {}
  void add(::std::shared_ptr<TRecommendationServiceIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void retrieve_recommended_posts(std::vector<TPost> & _return, const int32_t requester_id, const std::string& keyword) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->retrieve_recommended_posts(_return, requester_id, keyword);
    }
    ifaces_[i]->retrieve_recommended_posts(_return, requester_id, keyword);
    return;
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class TRecommendationServiceConcurrentClient : virtual public TRecommendationServiceIf {
 public:
  TRecommendationServiceConcurrentClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot, std::shared_ptr<::apache::thrift::async::TConcurrentClientSyncInfo> sync) : sync_(sync)
{
    setProtocol(prot);
  }
  TRecommendationServiceConcurrentClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot, std::shared_ptr<::apache::thrift::async::TConcurrentClientSyncInfo> sync) : sync_(sync)
{
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void retrieve_recommended_posts(std::vector<TPost> & _return, const int32_t requester_id, const std::string& keyword);
  int32_t send_retrieve_recommended_posts(const int32_t requester_id, const std::string& keyword);
  void recv_retrieve_recommended_posts(std::vector<TPost> & _return, const int32_t seqid);
 protected:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  std::shared_ptr<::apache::thrift::async::TConcurrentClientSyncInfo> sync_;
};

#ifdef _MSC_VER
  #pragma warning( pop )
#endif

} // namespace

#endif
