#
# Autogenerated by Thrift Compiler (0.14.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TFrozenDict, TException, TApplicationException
from thrift.protocol.TProtocol import TProtocolException
from thrift.TRecursive import fix_spec

import sys
import logging
from .ttypes import *
from thrift.Thrift import TProcessor
from thrift.transport import TTransport
all_structs = []


class Iface(object):
    def create_post(self, requester_id, text):
        """
        Parameters:
         - requester_id
         - text

        """
        pass

    def retrieve_standard_post(self, requester_id, post_id):
        """
        Parameters:
         - requester_id
         - post_id

        """
        pass

    def retrieve_expanded_post(self, requester_id, post_id):
        """
        Parameters:
         - requester_id
         - post_id

        """
        pass

    def delete_post(self, requester_id, post_id):
        """
        Parameters:
         - requester_id
         - post_id

        """
        pass

    def list_posts(self, requester_id, author_id):
        """
        Parameters:
         - requester_id
         - author_id

        """
        pass

    def count_posts_by_author(self, requester_id, author_id):
        """
        Parameters:
         - requester_id
         - author_id

        """
        pass


class Client(Iface):
    def __init__(self, iprot, oprot=None):
        self._iprot = self._oprot = iprot
        if oprot is not None:
            self._oprot = oprot
        self._seqid = 0

    def create_post(self, requester_id, text):
        """
        Parameters:
         - requester_id
         - text

        """
        self.send_create_post(requester_id, text)
        return self.recv_create_post()

    def send_create_post(self, requester_id, text):
        self._oprot.writeMessageBegin('create_post', TMessageType.CALL, self._seqid)
        args = create_post_args()
        args.requester_id = requester_id
        args.text = text
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_create_post(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = create_post_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "create_post failed: unknown result")

    def retrieve_standard_post(self, requester_id, post_id):
        """
        Parameters:
         - requester_id
         - post_id

        """
        self.send_retrieve_standard_post(requester_id, post_id)
        return self.recv_retrieve_standard_post()

    def send_retrieve_standard_post(self, requester_id, post_id):
        self._oprot.writeMessageBegin('retrieve_standard_post', TMessageType.CALL, self._seqid)
        args = retrieve_standard_post_args()
        args.requester_id = requester_id
        args.post_id = post_id
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_retrieve_standard_post(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = retrieve_standard_post_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "retrieve_standard_post failed: unknown result")

    def retrieve_expanded_post(self, requester_id, post_id):
        """
        Parameters:
         - requester_id
         - post_id

        """
        self.send_retrieve_expanded_post(requester_id, post_id)
        return self.recv_retrieve_expanded_post()

    def send_retrieve_expanded_post(self, requester_id, post_id):
        self._oprot.writeMessageBegin('retrieve_expanded_post', TMessageType.CALL, self._seqid)
        args = retrieve_expanded_post_args()
        args.requester_id = requester_id
        args.post_id = post_id
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_retrieve_expanded_post(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = retrieve_expanded_post_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e1 is not None:
            raise result.e1
        if result.e2 is not None:
            raise result.e2
        raise TApplicationException(TApplicationException.MISSING_RESULT, "retrieve_expanded_post failed: unknown result")

    def delete_post(self, requester_id, post_id):
        """
        Parameters:
         - requester_id
         - post_id

        """
        self.send_delete_post(requester_id, post_id)
        self.recv_delete_post()

    def send_delete_post(self, requester_id, post_id):
        self._oprot.writeMessageBegin('delete_post', TMessageType.CALL, self._seqid)
        args = delete_post_args()
        args.requester_id = requester_id
        args.post_id = post_id
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_delete_post(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = delete_post_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.e1 is not None:
            raise result.e1
        if result.e2 is not None:
            raise result.e2
        return

    def list_posts(self, requester_id, author_id):
        """
        Parameters:
         - requester_id
         - author_id

        """
        self.send_list_posts(requester_id, author_id)
        return self.recv_list_posts()

    def send_list_posts(self, requester_id, author_id):
        self._oprot.writeMessageBegin('list_posts', TMessageType.CALL, self._seqid)
        args = list_posts_args()
        args.requester_id = requester_id
        args.author_id = author_id
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_list_posts(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = list_posts_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "list_posts failed: unknown result")

    def count_posts_by_author(self, requester_id, author_id):
        """
        Parameters:
         - requester_id
         - author_id

        """
        self.send_count_posts_by_author(requester_id, author_id)
        return self.recv_count_posts_by_author()

    def send_count_posts_by_author(self, requester_id, author_id):
        self._oprot.writeMessageBegin('count_posts_by_author', TMessageType.CALL, self._seqid)
        args = count_posts_by_author_args()
        args.requester_id = requester_id
        args.author_id = author_id
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_count_posts_by_author(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = count_posts_by_author_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "count_posts_by_author failed: unknown result")


class Processor(Iface, TProcessor):
    def __init__(self, handler):
        self._handler = handler
        self._processMap = {}
        self._processMap["create_post"] = Processor.process_create_post
        self._processMap["retrieve_standard_post"] = Processor.process_retrieve_standard_post
        self._processMap["retrieve_expanded_post"] = Processor.process_retrieve_expanded_post
        self._processMap["delete_post"] = Processor.process_delete_post
        self._processMap["list_posts"] = Processor.process_list_posts
        self._processMap["count_posts_by_author"] = Processor.process_count_posts_by_author
        self._on_message_begin = None

    def on_message_begin(self, func):
        self._on_message_begin = func

    def process(self, iprot, oprot):
        (name, type, seqid) = iprot.readMessageBegin()
        if self._on_message_begin:
            self._on_message_begin(name, type, seqid)
        if name not in self._processMap:
            iprot.skip(TType.STRUCT)
            iprot.readMessageEnd()
            x = TApplicationException(TApplicationException.UNKNOWN_METHOD, 'Unknown function %s' % (name))
            oprot.writeMessageBegin(name, TMessageType.EXCEPTION, seqid)
            x.write(oprot)
            oprot.writeMessageEnd()
            oprot.trans.flush()
            return
        else:
            self._processMap[name](self, seqid, iprot, oprot)
        return True

    def process_create_post(self, seqid, iprot, oprot):
        args = create_post_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = create_post_result()
        try:
            result.success = self._handler.create_post(args.requester_id, args.text)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TPostInvalidAttributesException as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("create_post", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_retrieve_standard_post(self, seqid, iprot, oprot):
        args = retrieve_standard_post_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = retrieve_standard_post_result()
        try:
            result.success = self._handler.retrieve_standard_post(args.requester_id, args.post_id)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TPostNotFoundException as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("retrieve_standard_post", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_retrieve_expanded_post(self, seqid, iprot, oprot):
        args = retrieve_expanded_post_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = retrieve_expanded_post_result()
        try:
            result.success = self._handler.retrieve_expanded_post(args.requester_id, args.post_id)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TPostNotFoundException as e1:
            msg_type = TMessageType.REPLY
            result.e1 = e1
        except TAccountNotFoundException as e2:
            msg_type = TMessageType.REPLY
            result.e2 = e2
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("retrieve_expanded_post", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_delete_post(self, seqid, iprot, oprot):
        args = delete_post_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = delete_post_result()
        try:
            self._handler.delete_post(args.requester_id, args.post_id)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TPostNotFoundException as e1:
            msg_type = TMessageType.REPLY
            result.e1 = e1
        except TPostNotAuthorizedException as e2:
            msg_type = TMessageType.REPLY
            result.e2 = e2
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("delete_post", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_list_posts(self, seqid, iprot, oprot):
        args = list_posts_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = list_posts_result()
        try:
            result.success = self._handler.list_posts(args.requester_id, args.author_id)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TAccountNotFoundException as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("list_posts", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_count_posts_by_author(self, seqid, iprot, oprot):
        args = count_posts_by_author_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = count_posts_by_author_result()
        try:
            result.success = self._handler.count_posts_by_author(args.requester_id, args.author_id)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("count_posts_by_author", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

# HELPER FUNCTIONS AND STRUCTURES


class create_post_args(object):
    """
    Attributes:
     - requester_id
     - text

    """


    def __init__(self, requester_id=None, text=None,):
        self.requester_id = requester_id
        self.text = text

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.requester_id = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.text = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('create_post_args')
        if self.requester_id is not None:
            oprot.writeFieldBegin('requester_id', TType.I32, 1)
            oprot.writeI32(self.requester_id)
            oprot.writeFieldEnd()
        if self.text is not None:
            oprot.writeFieldBegin('text', TType.STRING, 2)
            oprot.writeString(self.text.encode('utf-8') if sys.version_info[0] == 2 else self.text)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(create_post_args)
create_post_args.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'requester_id', None, None, ),  # 1
    (2, TType.STRING, 'text', 'UTF8', None, ),  # 2
)


class create_post_result(object):
    """
    Attributes:
     - success
     - e

    """


    def __init__(self, success=None, e=None,):
        self.success = success
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = TPost()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.e = TPostInvalidAttributesException.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('create_post_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(create_post_result)
create_post_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [TPost, None], None, ),  # 0
    (1, TType.STRUCT, 'e', [TPostInvalidAttributesException, None], None, ),  # 1
)


class retrieve_standard_post_args(object):
    """
    Attributes:
     - requester_id
     - post_id

    """


    def __init__(self, requester_id=None, post_id=None,):
        self.requester_id = requester_id
        self.post_id = post_id

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.requester_id = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.post_id = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('retrieve_standard_post_args')
        if self.requester_id is not None:
            oprot.writeFieldBegin('requester_id', TType.I32, 1)
            oprot.writeI32(self.requester_id)
            oprot.writeFieldEnd()
        if self.post_id is not None:
            oprot.writeFieldBegin('post_id', TType.I32, 2)
            oprot.writeI32(self.post_id)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(retrieve_standard_post_args)
retrieve_standard_post_args.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'requester_id', None, None, ),  # 1
    (2, TType.I32, 'post_id', None, None, ),  # 2
)


class retrieve_standard_post_result(object):
    """
    Attributes:
     - success
     - e

    """


    def __init__(self, success=None, e=None,):
        self.success = success
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = TPost()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.e = TPostNotFoundException.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('retrieve_standard_post_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(retrieve_standard_post_result)
retrieve_standard_post_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [TPost, None], None, ),  # 0
    (1, TType.STRUCT, 'e', [TPostNotFoundException, None], None, ),  # 1
)


class retrieve_expanded_post_args(object):
    """
    Attributes:
     - requester_id
     - post_id

    """


    def __init__(self, requester_id=None, post_id=None,):
        self.requester_id = requester_id
        self.post_id = post_id

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.requester_id = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.post_id = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('retrieve_expanded_post_args')
        if self.requester_id is not None:
            oprot.writeFieldBegin('requester_id', TType.I32, 1)
            oprot.writeI32(self.requester_id)
            oprot.writeFieldEnd()
        if self.post_id is not None:
            oprot.writeFieldBegin('post_id', TType.I32, 2)
            oprot.writeI32(self.post_id)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(retrieve_expanded_post_args)
retrieve_expanded_post_args.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'requester_id', None, None, ),  # 1
    (2, TType.I32, 'post_id', None, None, ),  # 2
)


class retrieve_expanded_post_result(object):
    """
    Attributes:
     - success
     - e1
     - e2

    """


    def __init__(self, success=None, e1=None, e2=None,):
        self.success = success
        self.e1 = e1
        self.e2 = e2

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = TPost()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.e1 = TPostNotFoundException.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.e2 = TAccountNotFoundException.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('retrieve_expanded_post_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        if self.e1 is not None:
            oprot.writeFieldBegin('e1', TType.STRUCT, 1)
            self.e1.write(oprot)
            oprot.writeFieldEnd()
        if self.e2 is not None:
            oprot.writeFieldBegin('e2', TType.STRUCT, 2)
            self.e2.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(retrieve_expanded_post_result)
retrieve_expanded_post_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [TPost, None], None, ),  # 0
    (1, TType.STRUCT, 'e1', [TPostNotFoundException, None], None, ),  # 1
    (2, TType.STRUCT, 'e2', [TAccountNotFoundException, None], None, ),  # 2
)


class delete_post_args(object):
    """
    Attributes:
     - requester_id
     - post_id

    """


    def __init__(self, requester_id=None, post_id=None,):
        self.requester_id = requester_id
        self.post_id = post_id

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.requester_id = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.post_id = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('delete_post_args')
        if self.requester_id is not None:
            oprot.writeFieldBegin('requester_id', TType.I32, 1)
            oprot.writeI32(self.requester_id)
            oprot.writeFieldEnd()
        if self.post_id is not None:
            oprot.writeFieldBegin('post_id', TType.I32, 2)
            oprot.writeI32(self.post_id)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(delete_post_args)
delete_post_args.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'requester_id', None, None, ),  # 1
    (2, TType.I32, 'post_id', None, None, ),  # 2
)


class delete_post_result(object):
    """
    Attributes:
     - e1
     - e2

    """


    def __init__(self, e1=None, e2=None,):
        self.e1 = e1
        self.e2 = e2

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.e1 = TPostNotFoundException.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.e2 = TPostNotAuthorizedException.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('delete_post_result')
        if self.e1 is not None:
            oprot.writeFieldBegin('e1', TType.STRUCT, 1)
            self.e1.write(oprot)
            oprot.writeFieldEnd()
        if self.e2 is not None:
            oprot.writeFieldBegin('e2', TType.STRUCT, 2)
            self.e2.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(delete_post_result)
delete_post_result.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'e1', [TPostNotFoundException, None], None, ),  # 1
    (2, TType.STRUCT, 'e2', [TPostNotAuthorizedException, None], None, ),  # 2
)


class list_posts_args(object):
    """
    Attributes:
     - requester_id
     - author_id

    """


    def __init__(self, requester_id=None, author_id=None,):
        self.requester_id = requester_id
        self.author_id = author_id

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.requester_id = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.author_id = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('list_posts_args')
        if self.requester_id is not None:
            oprot.writeFieldBegin('requester_id', TType.I32, 1)
            oprot.writeI32(self.requester_id)
            oprot.writeFieldEnd()
        if self.author_id is not None:
            oprot.writeFieldBegin('author_id', TType.I32, 2)
            oprot.writeI32(self.author_id)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(list_posts_args)
list_posts_args.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'requester_id', None, None, ),  # 1
    (2, TType.I32, 'author_id', None, None, ),  # 2
)


class list_posts_result(object):
    """
    Attributes:
     - success
     - e

    """


    def __init__(self, success=None, e=None,):
        self.success = success
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.LIST:
                    self.success = []
                    (_etype17, _size14) = iprot.readListBegin()
                    for _i18 in range(_size14):
                        _elem19 = TPost()
                        _elem19.read(iprot)
                        self.success.append(_elem19)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.e = TAccountNotFoundException.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('list_posts_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.LIST, 0)
            oprot.writeListBegin(TType.STRUCT, len(self.success))
            for iter20 in self.success:
                iter20.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(list_posts_result)
list_posts_result.thrift_spec = (
    (0, TType.LIST, 'success', (TType.STRUCT, [TPost, None], False), None, ),  # 0
    (1, TType.STRUCT, 'e', [TAccountNotFoundException, None], None, ),  # 1
)


class count_posts_by_author_args(object):
    """
    Attributes:
     - requester_id
     - author_id

    """


    def __init__(self, requester_id=None, author_id=None,):
        self.requester_id = requester_id
        self.author_id = author_id

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.requester_id = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.author_id = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('count_posts_by_author_args')
        if self.requester_id is not None:
            oprot.writeFieldBegin('requester_id', TType.I32, 1)
            oprot.writeI32(self.requester_id)
            oprot.writeFieldEnd()
        if self.author_id is not None:
            oprot.writeFieldBegin('author_id', TType.I32, 2)
            oprot.writeI32(self.author_id)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(count_posts_by_author_args)
count_posts_by_author_args.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'requester_id', None, None, ),  # 1
    (2, TType.I32, 'author_id', None, None, ),  # 2
)


class count_posts_by_author_result(object):
    """
    Attributes:
     - success

    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.I32:
                    self.success = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('count_posts_by_author_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.I32, 0)
            oprot.writeI32(self.success)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(count_posts_by_author_result)
count_posts_by_author_result.thrift_spec = (
    (0, TType.I32, 'success', None, None, ),  # 0
)
fix_spec(all_structs)
del all_structs
