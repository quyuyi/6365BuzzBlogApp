#
# Autogenerated by Thrift Compiler (0.13.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TFrozenDict, TException, TApplicationException
from thrift.protocol.TProtocol import TProtocolException
from thrift.TRecursive import fix_spec

import sys
import logging
from .ttypes import *
from thrift.Thrift import TProcessor
from thrift.transport import TTransport
all_structs = []


class Iface(object):
    def like_post(self, requester_id, post_id):
        """
        Parameters:
         - requester_id
         - post_id

        """
        pass

    def retrieve_standard_like(self, requester_id, like_id):
        """
        Parameters:
         - requester_id
         - like_id

        """
        pass

    def retrieve_expanded_like(self, requester_id, like_id):
        """
        Parameters:
         - requester_id
         - like_id

        """
        pass

    def delete_like(self, requester_id, like_id):
        """
        Parameters:
         - requester_id
         - like_id

        """
        pass

    def list_likes(self, requester_id, account_id, post_id):
        """
        Parameters:
         - requester_id
         - account_id
         - post_id

        """
        pass

    def count_likes_by_account(self, requester_id, account_id):
        """
        Parameters:
         - requester_id
         - account_id

        """
        pass

    def count_likes_of_post(self, requester_id, post_id):
        """
        Parameters:
         - requester_id
         - post_id

        """
        pass


class Client(Iface):
    def __init__(self, iprot, oprot=None):
        self._iprot = self._oprot = iprot
        if oprot is not None:
            self._oprot = oprot
        self._seqid = 0

    def like_post(self, requester_id, post_id):
        """
        Parameters:
         - requester_id
         - post_id

        """
        self.send_like_post(requester_id, post_id)
        return self.recv_like_post()

    def send_like_post(self, requester_id, post_id):
        self._oprot.writeMessageBegin('like_post', TMessageType.CALL, self._seqid)
        args = like_post_args()
        args.requester_id = requester_id
        args.post_id = post_id
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_like_post(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = like_post_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "like_post failed: unknown result")

    def retrieve_standard_like(self, requester_id, like_id):
        """
        Parameters:
         - requester_id
         - like_id

        """
        self.send_retrieve_standard_like(requester_id, like_id)
        return self.recv_retrieve_standard_like()

    def send_retrieve_standard_like(self, requester_id, like_id):
        self._oprot.writeMessageBegin('retrieve_standard_like', TMessageType.CALL, self._seqid)
        args = retrieve_standard_like_args()
        args.requester_id = requester_id
        args.like_id = like_id
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_retrieve_standard_like(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = retrieve_standard_like_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "retrieve_standard_like failed: unknown result")

    def retrieve_expanded_like(self, requester_id, like_id):
        """
        Parameters:
         - requester_id
         - like_id

        """
        self.send_retrieve_expanded_like(requester_id, like_id)
        return self.recv_retrieve_expanded_like()

    def send_retrieve_expanded_like(self, requester_id, like_id):
        self._oprot.writeMessageBegin('retrieve_expanded_like', TMessageType.CALL, self._seqid)
        args = retrieve_expanded_like_args()
        args.requester_id = requester_id
        args.like_id = like_id
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_retrieve_expanded_like(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = retrieve_expanded_like_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e1 is not None:
            raise result.e1
        if result.e2 is not None:
            raise result.e2
        if result.e3 is not None:
            raise result.e3
        raise TApplicationException(TApplicationException.MISSING_RESULT, "retrieve_expanded_like failed: unknown result")

    def delete_like(self, requester_id, like_id):
        """
        Parameters:
         - requester_id
         - like_id

        """
        self.send_delete_like(requester_id, like_id)
        self.recv_delete_like()

    def send_delete_like(self, requester_id, like_id):
        self._oprot.writeMessageBegin('delete_like', TMessageType.CALL, self._seqid)
        args = delete_like_args()
        args.requester_id = requester_id
        args.like_id = like_id
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_delete_like(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = delete_like_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.e1 is not None:
            raise result.e1
        if result.e2 is not None:
            raise result.e2
        return

    def list_likes(self, requester_id, account_id, post_id):
        """
        Parameters:
         - requester_id
         - account_id
         - post_id

        """
        self.send_list_likes(requester_id, account_id, post_id)
        return self.recv_list_likes()

    def send_list_likes(self, requester_id, account_id, post_id):
        self._oprot.writeMessageBegin('list_likes', TMessageType.CALL, self._seqid)
        args = list_likes_args()
        args.requester_id = requester_id
        args.account_id = account_id
        args.post_id = post_id
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_list_likes(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = list_likes_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e1 is not None:
            raise result.e1
        if result.e2 is not None:
            raise result.e2
        raise TApplicationException(TApplicationException.MISSING_RESULT, "list_likes failed: unknown result")

    def count_likes_by_account(self, requester_id, account_id):
        """
        Parameters:
         - requester_id
         - account_id

        """
        self.send_count_likes_by_account(requester_id, account_id)
        return self.recv_count_likes_by_account()

    def send_count_likes_by_account(self, requester_id, account_id):
        self._oprot.writeMessageBegin('count_likes_by_account', TMessageType.CALL, self._seqid)
        args = count_likes_by_account_args()
        args.requester_id = requester_id
        args.account_id = account_id
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_count_likes_by_account(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = count_likes_by_account_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "count_likes_by_account failed: unknown result")

    def count_likes_of_post(self, requester_id, post_id):
        """
        Parameters:
         - requester_id
         - post_id

        """
        self.send_count_likes_of_post(requester_id, post_id)
        return self.recv_count_likes_of_post()

    def send_count_likes_of_post(self, requester_id, post_id):
        self._oprot.writeMessageBegin('count_likes_of_post', TMessageType.CALL, self._seqid)
        args = count_likes_of_post_args()
        args.requester_id = requester_id
        args.post_id = post_id
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_count_likes_of_post(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = count_likes_of_post_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "count_likes_of_post failed: unknown result")


class Processor(Iface, TProcessor):
    def __init__(self, handler):
        self._handler = handler
        self._processMap = {}
        self._processMap["like_post"] = Processor.process_like_post
        self._processMap["retrieve_standard_like"] = Processor.process_retrieve_standard_like
        self._processMap["retrieve_expanded_like"] = Processor.process_retrieve_expanded_like
        self._processMap["delete_like"] = Processor.process_delete_like
        self._processMap["list_likes"] = Processor.process_list_likes
        self._processMap["count_likes_by_account"] = Processor.process_count_likes_by_account
        self._processMap["count_likes_of_post"] = Processor.process_count_likes_of_post
        self._on_message_begin = None

    def on_message_begin(self, func):
        self._on_message_begin = func

    def process(self, iprot, oprot):
        (name, type, seqid) = iprot.readMessageBegin()
        if self._on_message_begin:
            self._on_message_begin(name, type, seqid)
        if name not in self._processMap:
            iprot.skip(TType.STRUCT)
            iprot.readMessageEnd()
            x = TApplicationException(TApplicationException.UNKNOWN_METHOD, 'Unknown function %s' % (name))
            oprot.writeMessageBegin(name, TMessageType.EXCEPTION, seqid)
            x.write(oprot)
            oprot.writeMessageEnd()
            oprot.trans.flush()
            return
        else:
            self._processMap[name](self, seqid, iprot, oprot)
        return True

    def process_like_post(self, seqid, iprot, oprot):
        args = like_post_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = like_post_result()
        try:
            result.success = self._handler.like_post(args.requester_id, args.post_id)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TLikeAlreadyExistsException as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("like_post", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_retrieve_standard_like(self, seqid, iprot, oprot):
        args = retrieve_standard_like_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = retrieve_standard_like_result()
        try:
            result.success = self._handler.retrieve_standard_like(args.requester_id, args.like_id)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TLikeNotFoundException as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("retrieve_standard_like", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_retrieve_expanded_like(self, seqid, iprot, oprot):
        args = retrieve_expanded_like_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = retrieve_expanded_like_result()
        try:
            result.success = self._handler.retrieve_expanded_like(args.requester_id, args.like_id)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TLikeNotFoundException as e1:
            msg_type = TMessageType.REPLY
            result.e1 = e1
        except TAccountNotFoundException as e2:
            msg_type = TMessageType.REPLY
            result.e2 = e2
        except TPostNotFoundException as e3:
            msg_type = TMessageType.REPLY
            result.e3 = e3
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("retrieve_expanded_like", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_delete_like(self, seqid, iprot, oprot):
        args = delete_like_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = delete_like_result()
        try:
            self._handler.delete_like(args.requester_id, args.like_id)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TLikeNotFoundException as e1:
            msg_type = TMessageType.REPLY
            result.e1 = e1
        except TLikeNotAuthorizedException as e2:
            msg_type = TMessageType.REPLY
            result.e2 = e2
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("delete_like", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_list_likes(self, seqid, iprot, oprot):
        args = list_likes_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = list_likes_result()
        try:
            result.success = self._handler.list_likes(args.requester_id, args.account_id, args.post_id)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TAccountNotFoundException as e1:
            msg_type = TMessageType.REPLY
            result.e1 = e1
        except TPostNotFoundException as e2:
            msg_type = TMessageType.REPLY
            result.e2 = e2
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("list_likes", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_count_likes_by_account(self, seqid, iprot, oprot):
        args = count_likes_by_account_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = count_likes_by_account_result()
        try:
            result.success = self._handler.count_likes_by_account(args.requester_id, args.account_id)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("count_likes_by_account", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_count_likes_of_post(self, seqid, iprot, oprot):
        args = count_likes_of_post_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = count_likes_of_post_result()
        try:
            result.success = self._handler.count_likes_of_post(args.requester_id, args.post_id)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("count_likes_of_post", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

# HELPER FUNCTIONS AND STRUCTURES


class like_post_args(object):
    """
    Attributes:
     - requester_id
     - post_id

    """


    def __init__(self, requester_id=None, post_id=None,):
        self.requester_id = requester_id
        self.post_id = post_id

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.requester_id = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.post_id = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('like_post_args')
        if self.requester_id is not None:
            oprot.writeFieldBegin('requester_id', TType.I32, 1)
            oprot.writeI32(self.requester_id)
            oprot.writeFieldEnd()
        if self.post_id is not None:
            oprot.writeFieldBegin('post_id', TType.I32, 2)
            oprot.writeI32(self.post_id)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(like_post_args)
like_post_args.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'requester_id', None, None, ),  # 1
    (2, TType.I32, 'post_id', None, None, ),  # 2
)


class like_post_result(object):
    """
    Attributes:
     - success
     - e

    """


    def __init__(self, success=None, e=None,):
        self.success = success
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = TLike()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.e = TLikeAlreadyExistsException()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('like_post_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(like_post_result)
like_post_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [TLike, None], None, ),  # 0
    (1, TType.STRUCT, 'e', [TLikeAlreadyExistsException, None], None, ),  # 1
)


class retrieve_standard_like_args(object):
    """
    Attributes:
     - requester_id
     - like_id

    """


    def __init__(self, requester_id=None, like_id=None,):
        self.requester_id = requester_id
        self.like_id = like_id

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.requester_id = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.like_id = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('retrieve_standard_like_args')
        if self.requester_id is not None:
            oprot.writeFieldBegin('requester_id', TType.I32, 1)
            oprot.writeI32(self.requester_id)
            oprot.writeFieldEnd()
        if self.like_id is not None:
            oprot.writeFieldBegin('like_id', TType.I32, 2)
            oprot.writeI32(self.like_id)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(retrieve_standard_like_args)
retrieve_standard_like_args.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'requester_id', None, None, ),  # 1
    (2, TType.I32, 'like_id', None, None, ),  # 2
)


class retrieve_standard_like_result(object):
    """
    Attributes:
     - success
     - e

    """


    def __init__(self, success=None, e=None,):
        self.success = success
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = TLike()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.e = TLikeNotFoundException()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('retrieve_standard_like_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(retrieve_standard_like_result)
retrieve_standard_like_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [TLike, None], None, ),  # 0
    (1, TType.STRUCT, 'e', [TLikeNotFoundException, None], None, ),  # 1
)


class retrieve_expanded_like_args(object):
    """
    Attributes:
     - requester_id
     - like_id

    """


    def __init__(self, requester_id=None, like_id=None,):
        self.requester_id = requester_id
        self.like_id = like_id

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.requester_id = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.like_id = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('retrieve_expanded_like_args')
        if self.requester_id is not None:
            oprot.writeFieldBegin('requester_id', TType.I32, 1)
            oprot.writeI32(self.requester_id)
            oprot.writeFieldEnd()
        if self.like_id is not None:
            oprot.writeFieldBegin('like_id', TType.I32, 2)
            oprot.writeI32(self.like_id)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(retrieve_expanded_like_args)
retrieve_expanded_like_args.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'requester_id', None, None, ),  # 1
    (2, TType.I32, 'like_id', None, None, ),  # 2
)


class retrieve_expanded_like_result(object):
    """
    Attributes:
     - success
     - e1
     - e2
     - e3

    """


    def __init__(self, success=None, e1=None, e2=None, e3=None,):
        self.success = success
        self.e1 = e1
        self.e2 = e2
        self.e3 = e3

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = TLike()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.e1 = TLikeNotFoundException()
                    self.e1.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.e2 = TAccountNotFoundException()
                    self.e2.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.e3 = TPostNotFoundException()
                    self.e3.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('retrieve_expanded_like_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        if self.e1 is not None:
            oprot.writeFieldBegin('e1', TType.STRUCT, 1)
            self.e1.write(oprot)
            oprot.writeFieldEnd()
        if self.e2 is not None:
            oprot.writeFieldBegin('e2', TType.STRUCT, 2)
            self.e2.write(oprot)
            oprot.writeFieldEnd()
        if self.e3 is not None:
            oprot.writeFieldBegin('e3', TType.STRUCT, 3)
            self.e3.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(retrieve_expanded_like_result)
retrieve_expanded_like_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [TLike, None], None, ),  # 0
    (1, TType.STRUCT, 'e1', [TLikeNotFoundException, None], None, ),  # 1
    (2, TType.STRUCT, 'e2', [TAccountNotFoundException, None], None, ),  # 2
    (3, TType.STRUCT, 'e3', [TPostNotFoundException, None], None, ),  # 3
)


class delete_like_args(object):
    """
    Attributes:
     - requester_id
     - like_id

    """


    def __init__(self, requester_id=None, like_id=None,):
        self.requester_id = requester_id
        self.like_id = like_id

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.requester_id = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.like_id = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('delete_like_args')
        if self.requester_id is not None:
            oprot.writeFieldBegin('requester_id', TType.I32, 1)
            oprot.writeI32(self.requester_id)
            oprot.writeFieldEnd()
        if self.like_id is not None:
            oprot.writeFieldBegin('like_id', TType.I32, 2)
            oprot.writeI32(self.like_id)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(delete_like_args)
delete_like_args.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'requester_id', None, None, ),  # 1
    (2, TType.I32, 'like_id', None, None, ),  # 2
)


class delete_like_result(object):
    """
    Attributes:
     - e1
     - e2

    """


    def __init__(self, e1=None, e2=None,):
        self.e1 = e1
        self.e2 = e2

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.e1 = TLikeNotFoundException()
                    self.e1.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.e2 = TLikeNotAuthorizedException()
                    self.e2.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('delete_like_result')
        if self.e1 is not None:
            oprot.writeFieldBegin('e1', TType.STRUCT, 1)
            self.e1.write(oprot)
            oprot.writeFieldEnd()
        if self.e2 is not None:
            oprot.writeFieldBegin('e2', TType.STRUCT, 2)
            self.e2.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(delete_like_result)
delete_like_result.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'e1', [TLikeNotFoundException, None], None, ),  # 1
    (2, TType.STRUCT, 'e2', [TLikeNotAuthorizedException, None], None, ),  # 2
)


class list_likes_args(object):
    """
    Attributes:
     - requester_id
     - account_id
     - post_id

    """


    def __init__(self, requester_id=None, account_id=None, post_id=None,):
        self.requester_id = requester_id
        self.account_id = account_id
        self.post_id = post_id

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.requester_id = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.account_id = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.post_id = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('list_likes_args')
        if self.requester_id is not None:
            oprot.writeFieldBegin('requester_id', TType.I32, 1)
            oprot.writeI32(self.requester_id)
            oprot.writeFieldEnd()
        if self.account_id is not None:
            oprot.writeFieldBegin('account_id', TType.I32, 2)
            oprot.writeI32(self.account_id)
            oprot.writeFieldEnd()
        if self.post_id is not None:
            oprot.writeFieldBegin('post_id', TType.I32, 3)
            oprot.writeI32(self.post_id)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(list_likes_args)
list_likes_args.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'requester_id', None, None, ),  # 1
    (2, TType.I32, 'account_id', None, None, ),  # 2
    (3, TType.I32, 'post_id', None, None, ),  # 3
)


class list_likes_result(object):
    """
    Attributes:
     - success
     - e1
     - e2

    """


    def __init__(self, success=None, e1=None, e2=None,):
        self.success = success
        self.e1 = e1
        self.e2 = e2

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.LIST:
                    self.success = []
                    (_etype17, _size14) = iprot.readListBegin()
                    for _i18 in range(_size14):
                        _elem19 = TLike()
                        _elem19.read(iprot)
                        self.success.append(_elem19)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.e1 = TAccountNotFoundException()
                    self.e1.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.e2 = TPostNotFoundException()
                    self.e2.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('list_likes_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.LIST, 0)
            oprot.writeListBegin(TType.STRUCT, len(self.success))
            for iter20 in self.success:
                iter20.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.e1 is not None:
            oprot.writeFieldBegin('e1', TType.STRUCT, 1)
            self.e1.write(oprot)
            oprot.writeFieldEnd()
        if self.e2 is not None:
            oprot.writeFieldBegin('e2', TType.STRUCT, 2)
            self.e2.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(list_likes_result)
list_likes_result.thrift_spec = (
    (0, TType.LIST, 'success', (TType.STRUCT, [TLike, None], False), None, ),  # 0
    (1, TType.STRUCT, 'e1', [TAccountNotFoundException, None], None, ),  # 1
    (2, TType.STRUCT, 'e2', [TPostNotFoundException, None], None, ),  # 2
)


class count_likes_by_account_args(object):
    """
    Attributes:
     - requester_id
     - account_id

    """


    def __init__(self, requester_id=None, account_id=None,):
        self.requester_id = requester_id
        self.account_id = account_id

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.requester_id = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.account_id = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('count_likes_by_account_args')
        if self.requester_id is not None:
            oprot.writeFieldBegin('requester_id', TType.I32, 1)
            oprot.writeI32(self.requester_id)
            oprot.writeFieldEnd()
        if self.account_id is not None:
            oprot.writeFieldBegin('account_id', TType.I32, 2)
            oprot.writeI32(self.account_id)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(count_likes_by_account_args)
count_likes_by_account_args.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'requester_id', None, None, ),  # 1
    (2, TType.I32, 'account_id', None, None, ),  # 2
)


class count_likes_by_account_result(object):
    """
    Attributes:
     - success

    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.I32:
                    self.success = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('count_likes_by_account_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.I32, 0)
            oprot.writeI32(self.success)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(count_likes_by_account_result)
count_likes_by_account_result.thrift_spec = (
    (0, TType.I32, 'success', None, None, ),  # 0
)


class count_likes_of_post_args(object):
    """
    Attributes:
     - requester_id
     - post_id

    """


    def __init__(self, requester_id=None, post_id=None,):
        self.requester_id = requester_id
        self.post_id = post_id

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.requester_id = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.post_id = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('count_likes_of_post_args')
        if self.requester_id is not None:
            oprot.writeFieldBegin('requester_id', TType.I32, 1)
            oprot.writeI32(self.requester_id)
            oprot.writeFieldEnd()
        if self.post_id is not None:
            oprot.writeFieldBegin('post_id', TType.I32, 2)
            oprot.writeI32(self.post_id)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(count_likes_of_post_args)
count_likes_of_post_args.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'requester_id', None, None, ),  # 1
    (2, TType.I32, 'post_id', None, None, ),  # 2
)


class count_likes_of_post_result(object):
    """
    Attributes:
     - success

    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.I32:
                    self.success = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('count_likes_of_post_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.I32, 0)
            oprot.writeI32(self.success)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(count_likes_of_post_result)
count_likes_of_post_result.thrift_spec = (
    (0, TType.I32, 'success', None, None, ),  # 0
)
fix_spec(all_structs)
del all_structs

