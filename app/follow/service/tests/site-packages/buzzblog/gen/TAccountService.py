#
# Autogenerated by Thrift Compiler (0.13.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TFrozenDict, TException, TApplicationException
from thrift.protocol.TProtocol import TProtocolException
from thrift.TRecursive import fix_spec

import sys
import logging
from .ttypes import *
from thrift.Thrift import TProcessor
from thrift.transport import TTransport
all_structs = []


class Iface(object):
    def authenticate_user(self, username, password):
        """
        Parameters:
         - username
         - password

        """
        pass

    def create_account(self, username, password, first_name, last_name):
        """
        Parameters:
         - username
         - password
         - first_name
         - last_name

        """
        pass

    def retrieve_standard_account(self, requester_id, account_id):
        """
        Parameters:
         - requester_id
         - account_id

        """
        pass

    def retrieve_expanded_account(self, requester_id, account_id):
        """
        Parameters:
         - requester_id
         - account_id

        """
        pass

    def update_account(self, requester_id, account_id, password, first_name, last_name):
        """
        Parameters:
         - requester_id
         - account_id
         - password
         - first_name
         - last_name

        """
        pass

    def delete_account(self, requester_id, account_id):
        """
        Parameters:
         - requester_id
         - account_id

        """
        pass


class Client(Iface):
    def __init__(self, iprot, oprot=None):
        self._iprot = self._oprot = iprot
        if oprot is not None:
            self._oprot = oprot
        self._seqid = 0

    def authenticate_user(self, username, password):
        """
        Parameters:
         - username
         - password

        """
        self.send_authenticate_user(username, password)
        return self.recv_authenticate_user()

    def send_authenticate_user(self, username, password):
        self._oprot.writeMessageBegin('authenticate_user', TMessageType.CALL, self._seqid)
        args = authenticate_user_args()
        args.username = username
        args.password = password
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_authenticate_user(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = authenticate_user_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e1 is not None:
            raise result.e1
        if result.e2 is not None:
            raise result.e2
        raise TApplicationException(TApplicationException.MISSING_RESULT, "authenticate_user failed: unknown result")

    def create_account(self, username, password, first_name, last_name):
        """
        Parameters:
         - username
         - password
         - first_name
         - last_name

        """
        self.send_create_account(username, password, first_name, last_name)
        return self.recv_create_account()

    def send_create_account(self, username, password, first_name, last_name):
        self._oprot.writeMessageBegin('create_account', TMessageType.CALL, self._seqid)
        args = create_account_args()
        args.username = username
        args.password = password
        args.first_name = first_name
        args.last_name = last_name
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_create_account(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = create_account_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e1 is not None:
            raise result.e1
        if result.e2 is not None:
            raise result.e2
        raise TApplicationException(TApplicationException.MISSING_RESULT, "create_account failed: unknown result")

    def retrieve_standard_account(self, requester_id, account_id):
        """
        Parameters:
         - requester_id
         - account_id

        """
        self.send_retrieve_standard_account(requester_id, account_id)
        return self.recv_retrieve_standard_account()

    def send_retrieve_standard_account(self, requester_id, account_id):
        self._oprot.writeMessageBegin('retrieve_standard_account', TMessageType.CALL, self._seqid)
        args = retrieve_standard_account_args()
        args.requester_id = requester_id
        args.account_id = account_id
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_retrieve_standard_account(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = retrieve_standard_account_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "retrieve_standard_account failed: unknown result")

    def retrieve_expanded_account(self, requester_id, account_id):
        """
        Parameters:
         - requester_id
         - account_id

        """
        self.send_retrieve_expanded_account(requester_id, account_id)
        return self.recv_retrieve_expanded_account()

    def send_retrieve_expanded_account(self, requester_id, account_id):
        self._oprot.writeMessageBegin('retrieve_expanded_account', TMessageType.CALL, self._seqid)
        args = retrieve_expanded_account_args()
        args.requester_id = requester_id
        args.account_id = account_id
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_retrieve_expanded_account(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = retrieve_expanded_account_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "retrieve_expanded_account failed: unknown result")

    def update_account(self, requester_id, account_id, password, first_name, last_name):
        """
        Parameters:
         - requester_id
         - account_id
         - password
         - first_name
         - last_name

        """
        self.send_update_account(requester_id, account_id, password, first_name, last_name)
        return self.recv_update_account()

    def send_update_account(self, requester_id, account_id, password, first_name, last_name):
        self._oprot.writeMessageBegin('update_account', TMessageType.CALL, self._seqid)
        args = update_account_args()
        args.requester_id = requester_id
        args.account_id = account_id
        args.password = password
        args.first_name = first_name
        args.last_name = last_name
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_update_account(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = update_account_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e1 is not None:
            raise result.e1
        if result.e2 is not None:
            raise result.e2
        if result.e3 is not None:
            raise result.e3
        raise TApplicationException(TApplicationException.MISSING_RESULT, "update_account failed: unknown result")

    def delete_account(self, requester_id, account_id):
        """
        Parameters:
         - requester_id
         - account_id

        """
        self.send_delete_account(requester_id, account_id)
        self.recv_delete_account()

    def send_delete_account(self, requester_id, account_id):
        self._oprot.writeMessageBegin('delete_account', TMessageType.CALL, self._seqid)
        args = delete_account_args()
        args.requester_id = requester_id
        args.account_id = account_id
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_delete_account(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = delete_account_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.e1 is not None:
            raise result.e1
        if result.e2 is not None:
            raise result.e2
        return


class Processor(Iface, TProcessor):
    def __init__(self, handler):
        self._handler = handler
        self._processMap = {}
        self._processMap["authenticate_user"] = Processor.process_authenticate_user
        self._processMap["create_account"] = Processor.process_create_account
        self._processMap["retrieve_standard_account"] = Processor.process_retrieve_standard_account
        self._processMap["retrieve_expanded_account"] = Processor.process_retrieve_expanded_account
        self._processMap["update_account"] = Processor.process_update_account
        self._processMap["delete_account"] = Processor.process_delete_account
        self._on_message_begin = None

    def on_message_begin(self, func):
        self._on_message_begin = func

    def process(self, iprot, oprot):
        (name, type, seqid) = iprot.readMessageBegin()
        if self._on_message_begin:
            self._on_message_begin(name, type, seqid)
        if name not in self._processMap:
            iprot.skip(TType.STRUCT)
            iprot.readMessageEnd()
            x = TApplicationException(TApplicationException.UNKNOWN_METHOD, 'Unknown function %s' % (name))
            oprot.writeMessageBegin(name, TMessageType.EXCEPTION, seqid)
            x.write(oprot)
            oprot.writeMessageEnd()
            oprot.trans.flush()
            return
        else:
            self._processMap[name](self, seqid, iprot, oprot)
        return True

    def process_authenticate_user(self, seqid, iprot, oprot):
        args = authenticate_user_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = authenticate_user_result()
        try:
            result.success = self._handler.authenticate_user(args.username, args.password)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TAccountInvalidCredentialsException as e1:
            msg_type = TMessageType.REPLY
            result.e1 = e1
        except TAccountDeactivatedException as e2:
            msg_type = TMessageType.REPLY
            result.e2 = e2
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("authenticate_user", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_create_account(self, seqid, iprot, oprot):
        args = create_account_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = create_account_result()
        try:
            result.success = self._handler.create_account(args.username, args.password, args.first_name, args.last_name)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TAccountInvalidAttributesException as e1:
            msg_type = TMessageType.REPLY
            result.e1 = e1
        except TAccountUsernameAlreadyExistsException as e2:
            msg_type = TMessageType.REPLY
            result.e2 = e2
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("create_account", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_retrieve_standard_account(self, seqid, iprot, oprot):
        args = retrieve_standard_account_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = retrieve_standard_account_result()
        try:
            result.success = self._handler.retrieve_standard_account(args.requester_id, args.account_id)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TAccountNotFoundException as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("retrieve_standard_account", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_retrieve_expanded_account(self, seqid, iprot, oprot):
        args = retrieve_expanded_account_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = retrieve_expanded_account_result()
        try:
            result.success = self._handler.retrieve_expanded_account(args.requester_id, args.account_id)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TAccountNotFoundException as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("retrieve_expanded_account", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_update_account(self, seqid, iprot, oprot):
        args = update_account_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = update_account_result()
        try:
            result.success = self._handler.update_account(args.requester_id, args.account_id, args.password, args.first_name, args.last_name)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TAccountNotAuthorizedException as e1:
            msg_type = TMessageType.REPLY
            result.e1 = e1
        except TAccountInvalidAttributesException as e2:
            msg_type = TMessageType.REPLY
            result.e2 = e2
        except TAccountNotFoundException as e3:
            msg_type = TMessageType.REPLY
            result.e3 = e3
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("update_account", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_delete_account(self, seqid, iprot, oprot):
        args = delete_account_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = delete_account_result()
        try:
            self._handler.delete_account(args.requester_id, args.account_id)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TAccountNotAuthorizedException as e1:
            msg_type = TMessageType.REPLY
            result.e1 = e1
        except TAccountNotFoundException as e2:
            msg_type = TMessageType.REPLY
            result.e2 = e2
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("delete_account", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

# HELPER FUNCTIONS AND STRUCTURES


class authenticate_user_args(object):
    """
    Attributes:
     - username
     - password

    """


    def __init__(self, username=None, password=None,):
        self.username = username
        self.password = password

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.username = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.password = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('authenticate_user_args')
        if self.username is not None:
            oprot.writeFieldBegin('username', TType.STRING, 1)
            oprot.writeString(self.username.encode('utf-8') if sys.version_info[0] == 2 else self.username)
            oprot.writeFieldEnd()
        if self.password is not None:
            oprot.writeFieldBegin('password', TType.STRING, 2)
            oprot.writeString(self.password.encode('utf-8') if sys.version_info[0] == 2 else self.password)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(authenticate_user_args)
authenticate_user_args.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'username', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'password', 'UTF8', None, ),  # 2
)


class authenticate_user_result(object):
    """
    Attributes:
     - success
     - e1
     - e2

    """


    def __init__(self, success=None, e1=None, e2=None,):
        self.success = success
        self.e1 = e1
        self.e2 = e2

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = TAccount()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.e1 = TAccountInvalidCredentialsException()
                    self.e1.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.e2 = TAccountDeactivatedException()
                    self.e2.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('authenticate_user_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        if self.e1 is not None:
            oprot.writeFieldBegin('e1', TType.STRUCT, 1)
            self.e1.write(oprot)
            oprot.writeFieldEnd()
        if self.e2 is not None:
            oprot.writeFieldBegin('e2', TType.STRUCT, 2)
            self.e2.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(authenticate_user_result)
authenticate_user_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [TAccount, None], None, ),  # 0
    (1, TType.STRUCT, 'e1', [TAccountInvalidCredentialsException, None], None, ),  # 1
    (2, TType.STRUCT, 'e2', [TAccountDeactivatedException, None], None, ),  # 2
)


class create_account_args(object):
    """
    Attributes:
     - username
     - password
     - first_name
     - last_name

    """


    def __init__(self, username=None, password=None, first_name=None, last_name=None,):
        self.username = username
        self.password = password
        self.first_name = first_name
        self.last_name = last_name

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.username = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.password = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.first_name = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.last_name = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('create_account_args')
        if self.username is not None:
            oprot.writeFieldBegin('username', TType.STRING, 1)
            oprot.writeString(self.username.encode('utf-8') if sys.version_info[0] == 2 else self.username)
            oprot.writeFieldEnd()
        if self.password is not None:
            oprot.writeFieldBegin('password', TType.STRING, 2)
            oprot.writeString(self.password.encode('utf-8') if sys.version_info[0] == 2 else self.password)
            oprot.writeFieldEnd()
        if self.first_name is not None:
            oprot.writeFieldBegin('first_name', TType.STRING, 3)
            oprot.writeString(self.first_name.encode('utf-8') if sys.version_info[0] == 2 else self.first_name)
            oprot.writeFieldEnd()
        if self.last_name is not None:
            oprot.writeFieldBegin('last_name', TType.STRING, 4)
            oprot.writeString(self.last_name.encode('utf-8') if sys.version_info[0] == 2 else self.last_name)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(create_account_args)
create_account_args.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'username', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'password', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'first_name', 'UTF8', None, ),  # 3
    (4, TType.STRING, 'last_name', 'UTF8', None, ),  # 4
)


class create_account_result(object):
    """
    Attributes:
     - success
     - e1
     - e2

    """


    def __init__(self, success=None, e1=None, e2=None,):
        self.success = success
        self.e1 = e1
        self.e2 = e2

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = TAccount()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.e1 = TAccountInvalidAttributesException()
                    self.e1.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.e2 = TAccountUsernameAlreadyExistsException()
                    self.e2.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('create_account_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        if self.e1 is not None:
            oprot.writeFieldBegin('e1', TType.STRUCT, 1)
            self.e1.write(oprot)
            oprot.writeFieldEnd()
        if self.e2 is not None:
            oprot.writeFieldBegin('e2', TType.STRUCT, 2)
            self.e2.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(create_account_result)
create_account_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [TAccount, None], None, ),  # 0
    (1, TType.STRUCT, 'e1', [TAccountInvalidAttributesException, None], None, ),  # 1
    (2, TType.STRUCT, 'e2', [TAccountUsernameAlreadyExistsException, None], None, ),  # 2
)


class retrieve_standard_account_args(object):
    """
    Attributes:
     - requester_id
     - account_id

    """


    def __init__(self, requester_id=None, account_id=None,):
        self.requester_id = requester_id
        self.account_id = account_id

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.requester_id = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.account_id = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('retrieve_standard_account_args')
        if self.requester_id is not None:
            oprot.writeFieldBegin('requester_id', TType.I32, 1)
            oprot.writeI32(self.requester_id)
            oprot.writeFieldEnd()
        if self.account_id is not None:
            oprot.writeFieldBegin('account_id', TType.I32, 2)
            oprot.writeI32(self.account_id)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(retrieve_standard_account_args)
retrieve_standard_account_args.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'requester_id', None, None, ),  # 1
    (2, TType.I32, 'account_id', None, None, ),  # 2
)


class retrieve_standard_account_result(object):
    """
    Attributes:
     - success
     - e

    """


    def __init__(self, success=None, e=None,):
        self.success = success
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = TAccount()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.e = TAccountNotFoundException()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('retrieve_standard_account_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(retrieve_standard_account_result)
retrieve_standard_account_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [TAccount, None], None, ),  # 0
    (1, TType.STRUCT, 'e', [TAccountNotFoundException, None], None, ),  # 1
)


class retrieve_expanded_account_args(object):
    """
    Attributes:
     - requester_id
     - account_id

    """


    def __init__(self, requester_id=None, account_id=None,):
        self.requester_id = requester_id
        self.account_id = account_id

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.requester_id = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.account_id = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('retrieve_expanded_account_args')
        if self.requester_id is not None:
            oprot.writeFieldBegin('requester_id', TType.I32, 1)
            oprot.writeI32(self.requester_id)
            oprot.writeFieldEnd()
        if self.account_id is not None:
            oprot.writeFieldBegin('account_id', TType.I32, 2)
            oprot.writeI32(self.account_id)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(retrieve_expanded_account_args)
retrieve_expanded_account_args.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'requester_id', None, None, ),  # 1
    (2, TType.I32, 'account_id', None, None, ),  # 2
)


class retrieve_expanded_account_result(object):
    """
    Attributes:
     - success
     - e

    """


    def __init__(self, success=None, e=None,):
        self.success = success
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = TAccount()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.e = TAccountNotFoundException()
                    self.e.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('retrieve_expanded_account_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(retrieve_expanded_account_result)
retrieve_expanded_account_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [TAccount, None], None, ),  # 0
    (1, TType.STRUCT, 'e', [TAccountNotFoundException, None], None, ),  # 1
)


class update_account_args(object):
    """
    Attributes:
     - requester_id
     - account_id
     - password
     - first_name
     - last_name

    """


    def __init__(self, requester_id=None, account_id=None, password=None, first_name=None, last_name=None,):
        self.requester_id = requester_id
        self.account_id = account_id
        self.password = password
        self.first_name = first_name
        self.last_name = last_name

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.requester_id = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.account_id = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.password = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.first_name = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.last_name = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('update_account_args')
        if self.requester_id is not None:
            oprot.writeFieldBegin('requester_id', TType.I32, 1)
            oprot.writeI32(self.requester_id)
            oprot.writeFieldEnd()
        if self.account_id is not None:
            oprot.writeFieldBegin('account_id', TType.I32, 2)
            oprot.writeI32(self.account_id)
            oprot.writeFieldEnd()
        if self.password is not None:
            oprot.writeFieldBegin('password', TType.STRING, 3)
            oprot.writeString(self.password.encode('utf-8') if sys.version_info[0] == 2 else self.password)
            oprot.writeFieldEnd()
        if self.first_name is not None:
            oprot.writeFieldBegin('first_name', TType.STRING, 4)
            oprot.writeString(self.first_name.encode('utf-8') if sys.version_info[0] == 2 else self.first_name)
            oprot.writeFieldEnd()
        if self.last_name is not None:
            oprot.writeFieldBegin('last_name', TType.STRING, 5)
            oprot.writeString(self.last_name.encode('utf-8') if sys.version_info[0] == 2 else self.last_name)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(update_account_args)
update_account_args.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'requester_id', None, None, ),  # 1
    (2, TType.I32, 'account_id', None, None, ),  # 2
    (3, TType.STRING, 'password', 'UTF8', None, ),  # 3
    (4, TType.STRING, 'first_name', 'UTF8', None, ),  # 4
    (5, TType.STRING, 'last_name', 'UTF8', None, ),  # 5
)


class update_account_result(object):
    """
    Attributes:
     - success
     - e1
     - e2
     - e3

    """


    def __init__(self, success=None, e1=None, e2=None, e3=None,):
        self.success = success
        self.e1 = e1
        self.e2 = e2
        self.e3 = e3

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = TAccount()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.e1 = TAccountNotAuthorizedException()
                    self.e1.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.e2 = TAccountInvalidAttributesException()
                    self.e2.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.e3 = TAccountNotFoundException()
                    self.e3.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('update_account_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        if self.e1 is not None:
            oprot.writeFieldBegin('e1', TType.STRUCT, 1)
            self.e1.write(oprot)
            oprot.writeFieldEnd()
        if self.e2 is not None:
            oprot.writeFieldBegin('e2', TType.STRUCT, 2)
            self.e2.write(oprot)
            oprot.writeFieldEnd()
        if self.e3 is not None:
            oprot.writeFieldBegin('e3', TType.STRUCT, 3)
            self.e3.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(update_account_result)
update_account_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [TAccount, None], None, ),  # 0
    (1, TType.STRUCT, 'e1', [TAccountNotAuthorizedException, None], None, ),  # 1
    (2, TType.STRUCT, 'e2', [TAccountInvalidAttributesException, None], None, ),  # 2
    (3, TType.STRUCT, 'e3', [TAccountNotFoundException, None], None, ),  # 3
)


class delete_account_args(object):
    """
    Attributes:
     - requester_id
     - account_id

    """


    def __init__(self, requester_id=None, account_id=None,):
        self.requester_id = requester_id
        self.account_id = account_id

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.requester_id = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.account_id = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('delete_account_args')
        if self.requester_id is not None:
            oprot.writeFieldBegin('requester_id', TType.I32, 1)
            oprot.writeI32(self.requester_id)
            oprot.writeFieldEnd()
        if self.account_id is not None:
            oprot.writeFieldBegin('account_id', TType.I32, 2)
            oprot.writeI32(self.account_id)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(delete_account_args)
delete_account_args.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'requester_id', None, None, ),  # 1
    (2, TType.I32, 'account_id', None, None, ),  # 2
)


class delete_account_result(object):
    """
    Attributes:
     - e1
     - e2

    """


    def __init__(self, e1=None, e2=None,):
        self.e1 = e1
        self.e2 = e2

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.e1 = TAccountNotAuthorizedException()
                    self.e1.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.e2 = TAccountNotFoundException()
                    self.e2.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('delete_account_result')
        if self.e1 is not None:
            oprot.writeFieldBegin('e1', TType.STRUCT, 1)
            self.e1.write(oprot)
            oprot.writeFieldEnd()
        if self.e2 is not None:
            oprot.writeFieldBegin('e2', TType.STRUCT, 2)
            self.e2.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(delete_account_result)
delete_account_result.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'e1', [TAccountNotAuthorizedException, None], None, ),  # 1
    (2, TType.STRUCT, 'e2', [TAccountNotFoundException, None], None, ),  # 2
)
fix_spec(all_structs)
del all_structs

