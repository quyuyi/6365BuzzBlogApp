// This autogenerated skeleton file illustrates how to build a server.
// You should copy it to another filename to avoid overwriting it.

#include "TUniquepairService.h"
#include <thrift/protocol/TBinaryProtocol.h>
#include <thrift/server/TSimpleServer.h>
#include <thrift/transport/TServerSocket.h>
#include <thrift/transport/TBufferTransports.h>

using namespace ::apache::thrift;
using namespace ::apache::thrift::protocol;
using namespace ::apache::thrift::transport;
using namespace ::apache::thrift::server;

using namespace  ::gen;

class TUniquepairServiceHandler : virtual public TUniquepairServiceIf {
 public:
  TUniquepairServiceHandler() {
    // Your initialization goes here
  }

  void get(TUniquepair& _return, const int32_t uniquepair_id) {
    // Your implementation goes here
    printf("get\n");
  }

  void add(TUniquepair& _return, const std::string& domain, const int32_t first_elem, const int32_t second_elem) {
    // Your implementation goes here
    printf("add\n");
  }

  void remove(const int32_t uniquepair_id) {
    // Your implementation goes here
    printf("remove\n");
  }

  void find(TUniquepair& _return, const std::string& domain, const int32_t first_elem, const int32_t second_elem) {
    // Your implementation goes here
    printf("find\n");
  }

  void all(std::vector<TUniquepair> & _return, const std::string& domain) {
    // Your implementation goes here
    printf("all\n");
  }

  void filter_by_first_elem(std::vector<TUniquepair> & _return, const std::string& domain, const int32_t first_elem) {
    // Your implementation goes here
    printf("filter_by_first_elem\n");
  }

  void filter_by_second_elem(std::vector<TUniquepair> & _return, const std::string& domain, const int32_t second_elem) {
    // Your implementation goes here
    printf("filter_by_second_elem\n");
  }

  int32_t count_first_elem(const std::string& domain, const int32_t first_elem) {
    // Your implementation goes here
    printf("count_first_elem\n");
  }

  int32_t count_second_elem(const std::string& domain, const int32_t second_elem) {
    // Your implementation goes here
    printf("count_second_elem\n");
  }

};

int main(int argc, char **argv) {
  int port = 9090;
  ::std::shared_ptr<TUniquepairServiceHandler> handler(new TUniquepairServiceHandler());
  ::std::shared_ptr<TProcessor> processor(new TUniquepairServiceProcessor(handler));
  ::std::shared_ptr<TServerTransport> serverTransport(new TServerSocket(port));
  ::std::shared_ptr<TTransportFactory> transportFactory(new TBufferedTransportFactory());
  ::std::shared_ptr<TProtocolFactory> protocolFactory(new TBinaryProtocolFactory());

  TSimpleServer server(processor, serverTransport, transportFactory, protocolFactory);
  server.serve();
  return 0;
}

